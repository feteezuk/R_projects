#install.packages("tidyverse", type = "binary")
#install.packages("ggrepel", type = "binary")
#install.packages("ggimage", type = "binary")
#install.packages("nflfastR", type = "binary")

library(tidyverse)
library(ggrepel)
library(ggimage)
library(nflfastR)

options(scipen = 9999)

#loads data play by play for 2019
data <- load_pbp(2019)


#######
#Basics: how to look at your data
########

dim(data) #48034 rows and 372 columns
str(data[1:10]) #structure of data
names(data) #lists 372 variable names
View(data) #views all the data

data %>% #View 4 columns of data
  select(home_team, away_team, posteam, desc) %>%
  View()

data %>% #look at the first few rows (the “head”) of the data.
  select(posteam, defteam, desc, rush, pass) %>% 
  head()

#######
#HOW TO FILTER DATA
########

data %>% #filter for rush or pass plays
  filter(rush ==1 | pass ==1) %>%
  select(posteam, desc, rush, pass, name, passer, rusher, receiver) %>% 
  head()

data %>% #Find special teams plays
  filter(special_teams_play ==1) %>%
  select(down, ydstogo, desc) %>% 
  head()

data %>% #find 4th down plays
  filter(down ==4) %>%
  select(down, ydstogo, desc) %>% 
  head()

data %>% #find 4th down plays
  filter(down ==4 & special_teams_play==0 ) %>%
  select(down, ydstogo, desc) %>% 
  head()

#!is.na(epa) means to exclude plays with missing (na) EPA. 
pbp_rp <- data %>% 
  filter(rush==1 | pass==1, !is.na(epa))

##########
#Group by and Summarize
##########

pbp_rp %>%
  filter(posteam =="DAL", rush ==1, play_type=='run') %>%
  group_by(rusher) %>%
  summarize(
    mean_epa = mean(epa),
    success_rate = mean(success),
    ypc = mean(yards_gained),
    plays = n()
  )%>%
arrange(-mean_epa) %>%
filter(plays > 20)
  
pbp_rp %>%
  filter(play_type == "run", rush ==1) %>%
  group_by(rusher) %>%
  summarize(
    mean_epa = mean(epa),
    success_rate = mean(success),
    ypc = mean(yards_gained),
    td = length(touchdown),
    plays = n()
  ) %>%
  arrange(-td)

head(pbp_rp$touchdown)

twentyone%>%
  filter(play_type == "run", rush ==1) %>%
  group_by(rusher) %>%
  summarize(
    mean_epa = mean(epa),
    success_rate = mean(success),
    ypc = mean(yards_gained),
    rushing_att = n(),
    td = sum(touchdown)
  ) %>%
  filter(rushing_att>200) %>%
  arrange(-success_rate)


#most_td_by_rusher 
twentyone%>%
  filter(play_type =="run",  touchdown==1) %>%
  group_by(rusher) %>%
  summarise(td=n()) %>%
arrange(-td) 

#########
#CREATE NEW COLUMNS WITH MUTATE
#########

#adds new column home. 1 if it's a home team, 0 if away team
pbp_rp %>%
  mutate(
    home = if_else(posteam == home_team, 1, 0)
  ) %>%
  select(posteam, home_team, home) %>%
  head(10)

pbp_rp %>%
  filter(!is.na(cp)) %>%
  mutate(
    depth = case_when(
      air_yards < 0 ~ "Negative",
      air_yards >= 0 & air_yards < 10 ~ "Short",
      air_yards >= 10 & air_yards < 20 ~ "Medium",
      air_yards >= 20 ~ "Deep"
    )
  ) %>%
  group_by(depth) %>%
  summarize(cp = mean(cp))

schotty <- pbp_rp %>%
  filter( wp > .20 & wp<.80 & down <= 2 & qtr <= 2 & half_seconds_remaining >120) %>%
  group_by(posteam) %>%
  summarise(mean_pass = mean(pass),
            plays = n()
            ) %>%
  arrange(-mean_pass)
  

ggplot(schotty, aes(x=reorder(posteam,-mean_pass), y=mean_pass)) +
  geom_text(aes(label=posteam))

#############
#LOAD MULTIPLE SEASONS
###########

#get data for 2018,2019,2020
pbp <- load_pbp(2018:2020) 

pbp %>% #check how many plays per season 
  group_by(season) %>%
  summarise(n=n())

#############
#CHECK QB stats
###########

qbs <- pbp %>%
  filter(season_type == "REG", !is.na(epa)) %>%
  group_by(id, name) %>%
  summarize(
    epa = mean(qb_epa),
    cpoe = mean(cpoe, na.rm = T),
    n_dropbacks = sum(pass),
    n_plays = n(),
    team = last(posteam)
  ) %>%
  ungroup() %>%
  filter(n_dropbacks > 100 & n_plays > 1000)

#The "team_colors_logos" dataframe is provided in the nflfastR package
head(teams_colors_logos)

##########
#LEFT JOIN
##########



#left_join means keep all the rows from the left dataframe (the first one provided, qbs),
#and join those rows to available rows in the other dataframe
qbs <- qbs %>%
  left_join(teams_colors_logos, by = c("team" = 'team_abbr'))

qbs %>%
  ggplot(aes(x = cpoe, y = epa)) +
  #horizontal line with mean EPA
  geom_hline(yintercept = mean(qbs$epa), color = "red", linetype = "dashed", alpha=0.5) +
  #vertical line with mean CPOE
  geom_vline(xintercept =  mean(qbs$cpoe), color = "red", linetype = "dashed", alpha=0.5) +
  #add points for the QBs with the logos
  geom_image(aes(image = team_logo_espn), size = qbs$n_plays / 45000, asp = 16 / 9) +
  #add names using ggrepel, which tries to make them not overlap
  geom_text_repel(aes(label=name)) +
  #add a smooth line fitting cpoe + epa
  stat_smooth(geom='line', alpha=0.5, se=FALSE, method='lm')+
  #titles and caption
  labs(x = "Completion % above expected (CPOE)",
       y = "EPA per play (passes, rushes, and penalties)",
       title = "Quarterback Efficiency, 2015 - 2019",
       caption = "Data: @nflfastR") +
  theme_bw() +
  #center title
  theme(
    aspect.ratio = 9 / 16,
    plot.title = element_text(size = 14, hjust = 0.5, face = "bold")
  ) +
  #make ticks look nice
  scale_y_continuous(breaks = scales::pretty_breaks(n = 10)) +
  scale_x_continuous(breaks = scales::pretty_breaks(n = 10))


###########
#CREATE A WIN TOTAL MODEL
#############
install.packages("nflreadr")
library(nflreadr)
games <- nflreadr::load_schedules()
str(games)

head(games)

#create a dataframe where each row is a team-season observation,
#listing how many games they won.

#get home team results, 
home = games %>%
  filter(game_type=='REG') %>%
  select(season, week, home_team, result) %>%
  rename(team=home_team) 
  
#get away game results - > flip results because u get home team results
away <- games %>%
  filter(game_type=='REG') %>%
select(season, week, away_team, result) %>%
  rename(team = away_team) %>%
  mutate(result = -result) 

#bind the away and home team results with new win column
results <- bind_rows(home, away) %>%
  arrange(week) %>%
  mutate(
    win = case_when(
      result >0 ~ 1,
      result < 0 ~ 0,
      result ==0 ~ 0.5
    )
  )

results %>% filter(season == 2019 & team == 'SEA')

#get team wins by season
#Use group by and summarize together
team_wins <- results %>%
 group_by(season, team) %>%
  summarize(
    wins = sum(win),
    point_diff = sum(result)
  ) 

#Show wins 
  team_wins %>%
    arrange(-wins) %>%
    head(5)












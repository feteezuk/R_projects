table(train$Pclass, train$Survived)
#Plot Survivors By Class. more
ggplot(x=train$Pclass, fill=train$Survived)
p<-ggplot(data=train, aes(x=Pclass, y=Survived)) +
geom_bar(stat="identity")
p<-ggplot(data=train, aes(x=Pclass, y=Survived)) +
geom_bar(stat="identity")
p<-ggplot(data=train, aes(x=Pclass, y=Survived)) +
geom_bar()
p<-ggplot(data=train, aes(x=Pclass, y=Survived)) +
geom_bar()
p<-ggplot(data=train, aes(x=Pclass, y=Survived)) +
geom_point()
p<-ggplot(data=train, aes(x=Pclass, y=Survived)) +
geom_bar(stat="identity")
mtcars
mtcars[order(mtcars$gear, mtcars$mpg), ]
mtcars[order(mtcars$mpg), ]
mtcars[order(-mtcars$mpg), ]
library(dplyr)
arrange(.data = mtcars, gear, mpg)
p<-ggplot(data=train, aes(x=Pclass, y=Survived)) +
geom_bar(stat="identity")
ggplot(data=train, aes(x=Pclass, y=Survived)) +
geom_bar(stat="identity")
ggplot(data=train, aes(x=Pclass, y=Survived)) +
geom_histogram(stat="identity")
ggplot(data=train, aes(x=Pclass, y=Survived)) +
geom_histogram()
ggplot(data=train, aes(x=Pclass, y=Survived)) +
geom_histogram()
ggplot(data=train, aes(x=Pclass, y=Survived)) +
geom_histogram(stat="identity")
ggplot(data=train, aes(x=Pclass, y=Survived)) +
geom_line(stat="identity")
ggplot(data=train, aes(x=Pclass, y=Survived)) +
geom_line()
ggplot(data=train, aes(x=Pclass, y=Survived)) +
geom_point()
train %>%
filter(Survived==1)%>%
ggplot(data=train, aes(x=Pclass, y=Survived)) +
geom_point()
train %>%
filter(Survived==1)%>%
ggplot(aes(x=Pclass, y=Survived)) +
geom_point()
train %>%
filter(Survived==1)%>%
ggplot(aes(x=Pclass, y=Survived)) +
geom_histogram()
train %>%
filter(Survived==1)%>%
ggplot(aes(x=Pclass, y=Survived)) +
geom_histogram(stat="identity")
table(train$Pclass, train$Survived)
ggplot(aes(x=Pclass, y=Survived)) +
geom_histogram(stat="identity")
ggplot(aes(x=Pclass, y=Survived)) +
geom_histogram(stat="identity")
ggplot(aes(x=Pclass, y=Survived)) +
geom_bar(stat="identity")
ggplot(train, aes(x=Pclass, y=Survived)) +
geom_bar(stat="identity")
ggplot(mtcars, aes(x = wt, y = mpg)) +
geom_point()
ggplot(train, aes(x=Pclass, y=Survived)) +
geom_bar(stat="identity")
ggplot(train, aes(x=Sex, y=Survived)) +
geom_bar()
ggplot(train, aes(x=Sex, y=Survived)) +
geom_bar(stat="identity")
ggplot(train, aes(x=Ticket, y=Survived)) +
geom_bar(stat="identity")
ggplot(train, aes(x=Ticket, y=Survived)) +
geom_bar(stat="identity")
ggplot(train, aes(x=Embarked, y=Survived)) +
geom_bar(stat="identity")
table(train$Embarked, train$Survived)
train$Embarked
head(crickets)
library(tidyverse)
head(crickets)
names(crickets)
data(crickets, package = "modeldata")
library(modeldata)
install.packages("modeldata")
library(modeldata)
data(crickets, package = "modeldata")
names(crickets)
ggplot(crickets, aes(x="temp", y="rate"))+
geom_line()
ggplot(crickets, aes(x=temp, y=rate))+
geom_line()
ggplot(crickets, aes(x=temp, y=rate, col=species))+
geom_line()
table(crickets$temp, crickets$rate)
table(crickets$species, crickets$rate)
library(modeldata) # This is also loaded by the tidymodels package
data(ames)
install.packages("tidymodels")
library(modeldata) # This is also loaded by the tidymodels package
data(ames)
dim(ames)
head(ames)
tidymodels_prefer()
ggplot(ames, aes(x = Sale_Price)) +
geom_histogram(bins = 50)
dim(ames)
ggplot(ames, aes(x = Sale_Price)) +
geom_histogram()
summary(ames)
ggplot(ames, aes(x = Sale_Price)) +
geom_histogram()+
scale_x_log10()
ames %>% mutate(Sale_Price = log10(Sale_Price))
ames <- ames %>% mutate(Sale_Price = log10(Sale_Price))
names(ames)
ggplot(ames, aes(x=Longitude, y=Latitude))+
geom_map()
ggplot(ames, aes(x=Longitude, y=Latitude))+
geom_map()
ggplot(ames, aes(x=Longitude, y=Latitude))+
geom_bar()
ggplot(ames, aes(x=Longitude, y=Latitude, col=Neighborhood))+
geom_bar()
ggplot(ames, aes(x=Longitude, y=Latitude, col=Neighborhood))+
geom_line()
ggplot(ames, aes(x=Longitude, y=Latitude, col=Neighborhood))+
geom_map()
# Set the random number stream using `set.seed()` so that the results can be
# reproduced later.
set.seed(123)
# Save the split information for an 80/20 split of the data
ames_split <- initial_split(ames, prop = 0.80)
library(tidymodels)
install.packages("tidymodels")
library(modeldata) # This is also loaded by the tidymodels package
data(ames)
dim(ames)
summary(ames)
ggplot(ames, aes(x = Sale_Price)) +
geom_histogram()+
scale_x_log10()
ames <- ames %>% mutate(Sale_Price = log10(Sale_Price))
library(tidymodels)
tidymodels_prefer()
# Set the random number stream using `set.seed()` so that the results can be
# reproduced later.
set.seed(123)
install.packages("tidymodels")
# Set the random number stream using `set.seed()` so that the results can be
# reproduced later.
set.seed(123)
# Save the split information for an 80/20 split of the data
ames_split <- initial_split(ames, prop = 0.80)
ames_split
# Save the split information for an 80/20 split of the data
ames_split <- initial_split(ames, prop=.80)
ames_split
ames_train <- training(ames_split)
ames_test <- testing(ames_split)
dim(ames_train)
dim(ames_te)
dim(ames_test)
#Use Strata sample technique to avoid bias from right skewed data
set.seed(123)
ames_split <- initial_split(ames, prop=.80, strata= Sale_Price)
ames_train<- training(ames_split)
ames_test <- testing(ames_split)
dim(ames_train)
dim(ames_test)
linear_reg() %>% set_engine("lm") %>% translate()
linear_reg() %>% set_engine("lm")
linear_reg() %>% set_engine("lm") %>% translate()
##############################
# Model Fitting Walkt-thru
###################################
lm_model <- linear_reg() %>% set_engine("lm")
lm_form_fit <- lm_model %>%
# Recall that Sale_Price has been pre-logged
fit(Sale_Price ~ Longitude + Latitude, data = ames_train)
lm_xy_fit <-
lm_model %>%
fit_xy(
x = ames_train %>% select(Longitude, Latitude),
y = ames_train %>% pull(Sale_Price)
)
lm_form_fit
lm_xy_fit
?rand_forest
#random Forest Tutorial
rand_forest(trees=1000, min_n=5) %>%
set_engine("ranger") %>%
set_mode("regression") %>%
translate()
#random Forest Tutorial
rand_forest(trees=1000, min_n=5) %>%
set_engine("ranger", verbose=TRUE) %>%
set_mode("regression") %>%
translate()
#random Forest Tutorial
rand_forest(trees=1000, min_n=5) %>%
set_engine("ranger", verbose=TRUE, seed=100) %>%
set_mode("regression") %>%
translate()
#random Forest Tutorial
rand_forest(trees=1000, min_n=5) %>%
set_engine("ranger", verbose=TRUE, seed=100, case.weights=TRUE) %>%
set_mode("regression") %>%
translate()
#random Forest Tutorial
rand_forest(trees=1000, min_n=5) %>%
set_engine("ranger", verbose=TRUE, seed=100, case.weights=case.weights) %>%
set_mode("regression") %>%
translate()
#How to view model results?
lm_form_fit
#How to view model results? use
#the results in a variety of ways; we might want to plot, print,
lm_form_fit
#How to view model results? use
#the results in a variety of ways; we might want to plot, print,
lm_form_fit %>%
pluck("fit")
#How to view model results? use
#the results in a variety of ways; we might want to plot, print,
lm_form_fit %>%
pluck("fit")
lm_form_fit %>%
pluck("fit") %>%
vcov()
?parsnip
lm_form_fit %>%
pluck("fit") %>%
vcov()
model_res <-
lm_form_fit %>%
pluck("fit") %>%
summary()
lm_form_fit %>%
pluck("fit") %>%
summary()
lm_form_fit %>%
pluck("fit") %>%
summary()
tidy(lm_form_fit)
predict(lm_form_fit, new_data = ames_test_small)
ames_test %>% slice(1:5)
ames_test_small <- ames_test %>% slice(1:5)
predict(lm_form_fit, new_data = ames_test_small)
parsnip_addin()
parsnip_addin()
library(tidymodels)
parsnip_addin()
require(shiny, miniUI, rstudioapi)
require("shiny", "miniUI",
"rstudioapi")
install.packages("shiny", "miniUI", "rstudioapi")
install.packages("shiny", "miniUI", "rstudioapi")
args(tidy)
args(round)
install.packages("tidyverse")
install.packages("tidyverse")
install.packages("tidyverse")
library(tidyverse)
head(mtcars)
ggplot(data=mpg) +
geom_point(mapping=aes(x=disp, y=hwy))
ggplot(data=mtcars) +
geom_point(mapping=aes(x=disp, y=hwy))
ggplot(data=mpg) +
geom_point(mapping=aes(x=disp, y=hwy))
ggplot(data=mpg) +
geom_point(mapping=aes(x=displ, y=hwy))
head(mpg)
?mpg
ggplot(data=mpg)
mtcars
nrow(mtcars)
ncol(mtcars)
?mtcarsx
?mtcars
?drv
?mpg
mtcars
mpg
ggplot(data=mpg) +
geom_point(mapping=aes(x=hwy, y=cyl))
ggplot(data=mpg) +
geom_point(mapping=aes(x=class, y=drv))
ggplot(data=mpg) +
geom_point(mapping=aes(x=displ, y=hwy, color=class))
ggplot(data=mpg) +
geom_point(mapping=aes(x=displ, y=hwy, shape=class))
ggplot(data=mpg) +
geom_point(mapping=aes(x=displ, y=hwy, color=blue))
ggplot(data=mpg) +
geom_point(mapping=aes(x=displ, y=hwy, color="blue"))
ggplot(data=mpg) +
geom_point(mapping=aes(x=displ, y=hwy),  color="blue")
ggplot(data=mpg) +
geom_point(mapping=aes(x=displ, y=hwy, col=class),  color="blue")
ggplot(data=mpg) +
geom_point(mapping=aes(x=displ, y=hwy, color=class),  color="blue")
ggplot(data=mpg) +
geom_point(mapping=aes(x=displ, y=hwy, shape=class),  color="blue")
?geom_bar
?stat_summary
diamonds
ggplot(data=mpg)+
geom_bar(x=cut)
ggplot(data=mpg)+
geom_bar(mapping=aes(x=cut))
ggplot(data=diamonds)+
geom_bar(mapping=aes(x=cut))
?geom_bar
ggplot(data=diamonds)+
geom_bar(mapping=aes(x=cut))+
stat=identity()
ggplot(data=diamonds)+
geom_bar(mapping=aes(x=cut), stat="identity")
ggplot(data=diamonds)+
geom_bar(mapping=aes(x=cut, y=depth), stat="identity")
?computed_variables
?geom_bar
?stat_summary
ggplot(data=diamonds)+
geom_col(mapping=aes(x=cut, y=depth))
ggplot(data=diamonds)+
geom_col(mapping=aes(x=cut, color=depth))
ggplot(data=diamonds)+
geom_bar(mapping=aes(x=cut, color=depth))
ggplot(data=diamonds)+
geom_bar(mapping=aes(x=cut, color=depth))
ggplot(data=diamonds)+
geom_bar(mapping=aes(x=cut, fill=depth))
ggplot(data=diamonds)+
geom_bar(mapping=aes(x=cut, fill=cut))
ggplot(data=diamonds)+
geom_bar(mapping=aes(x=cut, fill=depth))
ggplot(data=diamonds)+
geom_bar(mapping=aes(x=cut, fill=cut))
ggplot(data=diamonds)+
geom_bar(mapping=aes(x=cut, fill=clarity))
ggplot(data=diamonds)+
geom_bar(mapping=aes(x=cut, fill=clarity), stat="identity")
ggplot(data=diamonds)+
geom_bar(mapping=aes(x=cut, fill=clarity))
ggplot(data=diamonds)+
geom_bar(mapping=aes(x=cut, fill=clarity),
position="dodge")
?geom_bar
ggplot(data=diamonds)+
geom_bar(mapping=aes(x=cut, fill=clarity),
position="dodge") +
coord_polar()
diamonds
#create a circle chart pie graph
ggplot(data=diamonds) +
geom_bar(mapping=aes(x=cut, fill=color))
#create a circle chart pie graph
ggplot(data=diamonds) +
geom_bar(mapping=aes(x=cut, fill=color),
position="dodge")
#create a circle chart pie graph
ggplot(data=diamonds) +
coord_polar(mapping=aes(x=cut, fill=color),
)
#create a circle chart pie graph
ggplot(data=diamonds) +
geom_bar(mapping=aes(x=cut, fill=color),
)
#create a circle chart pie graph
ggplot(data=diamonds) +
geom_bar(mapping=aes(x=cut, fill=color),
)+
coord_polar()
#create a circle chart pie graph
ggplot(data=diamonds) +
geom_bar(mapping=aes(x=cut, fill=color),
)
#create a circle chart pie graph
ggplot(data=diamonds) +
geom_bar(mapping=aes(x=cut),
)
#create a circle chart pie graph
ggplot(data=diamonds) +
geom_bar(mapping=aes(x=cut),
)+
coord_polar()
#create a circle chart pie graph
ggplot(data=diamonds) +
geom_bar(mapping=aes(x=cut, color=cut),
)+
coord_polar()
#create a circle chart pie graph
ggplot(data=diamonds) +
geom_bar(mapping=aes(x=cut, fill=cut),
)+
coord_polar()
seq(1:10)
c(1:10)
flgihts
#ch3
install.packages("dplyr")
install.packages("dplyr")
library(dplyr)
flights
flight
head(flights)
library(tidyverse)
head(flights)
install.packages("tidyverse")
install.packages("tidyverse")
library(tidyverse)
head(flights)
flights
nycflights13::
nycflights13
nycflights13::flights
flights<- nycflights13::flights
flights
filter(flights, month==1)
filter(flights, month==1, sched_arr_time==819)
filter(flights, month==1, sched_arr_time==819&820)
filter(flights, month==1, sched_arr_time==819&820)  %>%
arrange(-sched_arr_time)
flights
filter(flights, month==1, sched_arr_time==819&1022)  %>%
arrange(-sched_arr_time)
filter(flights, month==1, sched_arr_time==819&1022)  %>%
arrange(-sched_arr_time)
filter(flights, month==1, sched_arr_time==1022&819)  %>%
arrange(-sched_arr_time)
filter(flights, month==1, sched_arr_time==1022&819)  %>%
arrange(-sched_arr_time)
filter(flights, month==1, sched_arr_time==1022 | sched_arr_time==819)  %>%
arrange(-sched_arr_time)
filter(flights, month==1, sched_arr_time==1022 | sched_arr_time==819)  %>%
arrange(sched_arr_time)
flights-sched_arr_time)
filter(flights, month==1, sched_arr_time==1022 | sched_arr_time==819)  %>%
arrange(-sched_arr_time)
flights %>%
filter (dep_delay < 120)
View(flights)
flights %>%
filter (arr_delay < 120)
View(flights)
flights %>%
filter (arr_delay < 120, dest==IAH | dest==HOU )
flights %>%
filter (arr_delay < 120, dest=="IAH" | dest=="HOU" )
head(flights)
View(flights)
flights %>%
filter (arr_delay < 120, dest=="IAH" | dest=="HOU")%>%
View(flights)
flights %>%
filter (arr_delay < 120, dest=="IAH" | dest=="HOU")%>%
View()
?flights
flights %>%
arrange(-month) %>%
head()
flights %>%
arrange(month) %>%
head()
flights %>%
arrange(-(month)) %>%
head()
flights %>%
arrange(-(is.na()) ) %>%
head()
flights %>%
arrange(-(is.na(flights)) ) %>%
head()
flights %>%
arrange((is.na(flights)) ) %>%
head()
flights %>-(is.na(flights)) ) %>%
head()
flights %>%
arrange(-(is.na(flights)) ) %>%
head()
flights %>%
arrange(-dep_time ) %>%
head()
head()
#sort all mmissing  values to start
flights %>%
arrange(-is.na(flights) ) %>%
head()
View(flights)
#most delayed flights
flights %>%
arrange(-dep_delay ) %>%
head()
# flights that left earliert
flights %>%
arrange(dep_delay) %>%
head()
#most delayed flights
flights %>%
arrange(-dep_delay ) %>%
head()
# flights that left earliert
flights %>%
arrange(dep_delay) %>%
head()
View(flights)

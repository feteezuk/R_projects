geom_histogram()
#thenplot
ggplot(mapping=aes(x=carat))+
geom_histogram(binwidth = .1)
#filter to get smaller subset of data
diamonds %>%
filter(carat<3) %>%
ggplot(mapping=aes(x=carat))+
geom_histogram(binwidth = .1)
##### OVERLAY MULTIPLE HISTOGRAMS ON 1 GRAPH (use freqpoly)
ggplot(diamonds, mapping=aes(x=carat, color=cut ))+
geom_freqpoly(binwidth=0.1)
##### OVERLAY MULTIPLE HISTOGRAMS ON 1 GRAPH (use freqpoly)
ggplot(diamonds, mapping=aes(x=carat, color=cut ))+
geom_freqpoly(binwidth=0.1)+
xlim=3
##### OVERLAY MULTIPLE HISTOGRAMS ON 1 GRAPH (use freqpoly)
ggplot(diamonds, mapping=aes(x=carat, color=cut ))+
geom_freqpoly(binwidth=0.1, xlim=3)+
##### OVERLAY MULTIPLE HISTOGRAMS ON 1 GRAPH (use freqpoly)
ggplot(diamonds, mapping=aes(x=carat, color=cut ))+
geom_freqpoly(binwidth=0.1, xlim=3)
##### OVERLAY MULTIPLE HISTOGRAMS ON 1 GRAPH (use freqpoly)
ggplot(diamonds, mapping=aes(x=carat, color=cut ))+
geom_freqpoly(binwidth=0.1)+
xlim(0,3)
ggplot(diamonds, mapping=aes(carat))+
geom_histogram(binwidth = .1)
ggplot(diamonds, mapping=aes(carat))+
geom_histogram(binwidth = .1)+
xlim(0,3)
ggplot(diamonds, mapping=aes(carat))+
geom_histogram(binwidth = .1)+
xlim(0,2)
ggplot(diamonds, mapping=aes(carat))+
geom_histogram(binwidth = .1)+
xlim(0,3)
ggplot(diamonds, mapping=aes(carat))+
geom_histogram(binwidth = .01)+
xlim(0,3)
ggplot(diamonds, mapping=aes(carat))+
geom_freqpoly(binwidth = .01)+
xlim(0,3)
ggplot(diamonds, mapping=aes(carat))+
geom_freqpoly(mapping=aes(color=cut),binwidth = .01)+
xlim(0,3)
ggplot(diamonds, mapping=aes(carat))+
geom_freqpoly(mapping=aes(color=cut),binwidth = .01)+
xlim(0,2.3)
#VIZUALIZE CONTINUOUS VARIABLES WITH BOXPLOT
ggplot(mpg)
#VIZUALIZE CONTINUOUS VARIABLES WITH BOXPLOT
ggplot(mpg)+
geom_boxplot(mapping=aes(x=rclass,y=hwy))
#VIZUALIZE CONTINUOUS VARIABLES WITH BOXPLOT
ggplot(mpg)+
geom_boxplot(mapping=aes(x=class,y=hwy))
#VIZUALIZE CONTINUOUS VARIABLES WITH BOXPLOT
ggplot(mpg)+
geom_boxplot(mapping=aes(x=reorder(class,hwy,FUN=mean),
y=hwy))
#VIZUALIZE CONTINUOUS VARIABLES WITH BOXPLOT
ggplot(mpg)+
geom_boxplot(mapping=aes(x=reorder(class,hwy,FUN=median),
y=hwy))
diamonds %>%
count()
diamonds %>%
count(color)
diamonds %>%
count(color, cut)
diamonds %>%
count(color, cut) %>%
ggplot(mapping=aes(x=color, y=cut))+
geom_tile()
diamonds %>%
count(color, cut) %>%
ggplot(mapping=aes(x=color, color=cut))+
geom_tile()
diamonds %>%
count(color, cut) %>%
ggplot(mapping=aes(x=color, y=cut))+
geom_tile()
diamonds %>%
count(color, cut) %>%
ggplot(mapping=aes(x=color, y=cut))+
geom_tile(mapping=aes(fill=n))
#Use "geom_bin2d()" to VISUALIZE CONTINUOUS DATA
ggplot(diamonds) +
geom_bin2d(mapping=aes(x=carat, y=price))
#Use hexbin to visualize continuous data
ggplot(diamonds) +
geom_hex(mapping=aes(x=carat, y=price))
#Use "geom_bin2d()" to VISUALIZE CONTINUOUS DATA
ggplot(diamonds) +
geom_bin2d(mapping=aes(x=carat, y=price))
#Use hexbin to visualize continuous data
ggplot(diamonds) +
geom_hex(mapping=aes(x=carat, y=price))
#Use hexbin to visualize continuous data
ggplot(diamonds) +
geom_hex(mapping=aes(x=cut_width(carat, .1) , y=price))
#Use hexbin to visualize continuous data
ggplot(diamonds) +
geom_hex(mapping=aes(x=cut_width(carat, .5) , y=price))
#Use hexbin to visualize continuous data
ggplot(diamonds) +
geom_hex(mapping=aes(x=carat, y=price))
#Use Boxplot to vizualize continious DATA
ggplot(mpg)+
geom_boxplot(mapping=aes(x=carat, y=price))
#Use Boxplot to vizualize continious DATA
ggplot(diamonds)+
geom_boxplot(mapping=aes(x=carat, y=price))
geom_boxplot()
#Use Boxplot to vizualize continious DATA
ggplot(diamonds, mapping=aes(x=carat, y=price))+
geom_boxplot()
#Use Boxplot to vizualize continious DATA
ggplot(diamonds, mapping=aes(x=carat, y=price))+
geom_boxplot(mapping=aes(group=cut_width(carat,0.1)))
#Use Boxplot to vizualize continious DATA
ggplot(diamonds, mapping=aes(x=carat, y=price))+
geom_boxplot(mapping=aes(group=cut_width(carat,0.1)))+
xlim(.5, 2.5)
#Use Boxplot to vizualize continious DATA
ggplot(diamonds, mapping=aes(x=carat, y=price))+
geom_boxplot(mapping=aes(group=cut_width(carat,0.1)))+
xlim(.5, 2.8)
#Use Boxplot to vizualize continious DATA
ggplot(diamonds, mapping=aes(x=carat, color=price))+
geom_boxplot(mapping=aes(group=cut_width(carat,0.1)))+
xlim(.5, 2.8)
#Use Boxplot to vizualize continious DATA
ggplot(diamonds, mapping=aes(x=carat, size=price))+
geom_boxplot(mapping=aes(group=cut_width(carat,0.1)))+
xlim(.5, 2.8)
#Use Boxplot to vizualize continious DATA
ggplot(diamonds, mapping=aes(x=carat, y=price))+
geom_boxplot(mapping=aes(group=cut_width(carat,0.1)))+
xlim(.5, 2.8)
ggplot(diamonds, x=cut, y=price)+
geom_line()
ggplot(diamonds,mapping=aes( x=cut, y=price))+
geom_point()
ggplot(diamonds,mapping=aes( x=cut, y=price))+
geom_boxplot()
ggplot(diamonds,mapping=aes( x=carat, y=price))+
geom_boxplot(binwidth=.2)
ggplot(diamonds,mapping=aes( x=carat, y=price), binwidth=.2)+
geom_boxplot()
ggplot(diamonds,mapping=aes( x=carat, y=price) binwidth=.2)+
geom_boxplot()
ggplot(diamonds,mapping=aes( x=carat, y=price, binwidth=.2))+
geom_boxplot()
ggplot(diamonds,mapping=aes( x=carat, y=price))+
geom_boxplot()
ggplot(diamonds,mapping=aes( x=carat, y=price))+
geom_boxplot(aes(group=binwidth=.2))
ggplot(diamonds,mapping=aes( x=carat, y=price))+
geom_boxplot()
ggplot(diamonds,mapping=aes( x=carat, y=price))+
geom_point()
ggplot(diamonds,mapping=aes( x=carat, y=price))+
geom_boxplot()
#Use cut_width for CONTINUOUS VAR.
diamonds %>%
count(cut_width(carat,.5)) #cut_width
#Filter to get smaller subset of data
diamonds %>%
filter(carat<3) %>%
ggplot(mapping=aes(x=carat))+
geom_histogram(binwidth = .1) #visualize # of observations .1 carat (bin) apart
ggplot(diamonds, aes(carat,price)) +
geom_hex()
#get count for cut, clarity color
diamonds %>%
count(cut,clarity,color)
#Use cut_width for CONTINUOUS VAR.
diamonds %>%
count(cut_width(carat,.5)) #cut_width
ggplot(diamonds) +
geom_point(mapping=aes(carat, price))
ggplot(diamonds) +
geom_hex(mapping=aes(carat, price))
ggplot(diamonds) +
geom_abline(mapping=aes(carat, price))
ggplot(diamonds) +
geom_boxplot(mapping=aes(carat, price))
ggplot(diamonds) +
geom_boxplot(mapping=aes(x=cutwidth(carat,.1), price))
ggplot(diamonds) +
geom_boxplot(mapping=aes(x=cut_width(carat,.1), price))
ggplot(diamonds) +
geom_boxplot(mapping=aes(x=cut_width(carat,.1), price))+
xlim(0,2)
ggplot(diamonds) +
geom_boxplot(mapping=aes(x=cut_width(carat,.1), price))+
xlim(0,3)
ggplot(diamonds) +
geom_boxplot(mapping=aes(x=cut_width(carat,.1), price))+
xlim(0,3)
ggplot(diamonds) +
geom_boxplot(mapping=aes(x=cut_width(carat,.1), price))
ggplot(diamonds) +
geom_boxplot(mapping=aes(x=cut_width(carat,.5), price))
ggplot(diamonds) +
geom_boxplot(mapping=aes(x=cut_width(carat,.5), price))+
xlim(0,5)
ggplot(diamonds<3) +
geom_boxplot(mapping=aes(x=cut_width(carat,.5), price))
#Filter to get smaller subset of data
diamonds %>%
filter(carat<3) %>%
ggplot(mapping=aes(x=carat))+
geom_histogram(binwidth = .1) #visualize # of observations .1 carat (bin) apart
ggplot(diamonds) +
geom_boxplot(mapping=aes(x=carat, price))
ggplot(diamonds) +
geom_boxplot(mapping=aes(x=carat, price), binwidth=.1)
ggplot(diamonds) +
geom_boxplot(mapping=aes(x=carat, price), binwidth=.5)
ggplot(diamonds, mapping=aes(x=carat, price)) +
geom_boxplot(binwidth=.5)
ggplot(diamonds, mapping=aes(x=carat, price)) +
geom_histogram(binwidth=.5)
ggplot(diamonds, mapping=aes(carat, price)) +
geom_histogram(binwidth=.5)
ggplot(diamonds, mapping=aes(carat)) +
geom_histogram(binwidth=.5)
ggplot(diamonds, mapping=aes(carat)) +
geom_histogram(binwidth=.1)
ggplot(diamonds, mapping=aes(carat)) +
geom_histogram(binwidth=.01)
#Filter to get smaller subset of data
diamonds %>%
filter(carat<3) %>%
ggplot(mapping=aes(x=carat))+
geom_histogram(binwidth = .2) #visualize # of observations .1 carat (bin) apart
ggplot(diamonds, mapping=aes(carat)) +
geom_histogram(binwidth=.01)
#Use cut_width for CONTINUOUS VAR.
diamonds %>%
count(cut_width(carat,.5)) #cut_width
ggplot(diamonds, mapping=aes(carat)) +
geom_histogram(binwidth=.01)
ggplot(diamonds, mapping=aes(carat)) +
geom_histogram(binwidth=.1)
ggplot(diamonds, mapping=aes(carat,price)) +
geom_histogram(binwidth=.1)
ggplot(diamonds, mapping=aes(price)) +
geom_histogram(binwidth=.1)
ggplot(diamonds, mapping=aes(price)) +
geom_histogram(binwidth=.1)
ggplot(diamonds, mapping=aes(price)) +
geom_histogram(binwidth=1)
ggplot(diamonds, mapping=aes(carat)) +
geom_histogram(binwidth=1)
ggplot(diamonds, mapping=aes(carat)) +
geom_histogram(binwidth=1)
ggplot(diamonds, mapping=aes(price)) +
geom_histogram(binwidth=1)
ggplot(diamonds, mapping=aes(price)) +
geom_histogram(binwidth=100)
ggplot(diamonds, mapping=aes(carat)) +
geom_histogram(binwidth=1)
#Filter to get smaller subset of data
diamonds %>%
filter(carat<3) %>%
ggplot(mapping=aes(x=carat))+
geom_histogram(binwidth = .2) #visualize # of observations .1 carat (bin) apart
##### OVERLAY MULTIPLE HISTOGRAMS ON 1 GRAPH (use freqpoly)
ggplot(diamonds, mapping=aes(x=carat, color=cut ))+
geom_freqpoly(binwidth=0.1)+
xlim(0,3)
ggplot(diamonds, mapping=aes(carat))+
geom_freqpoly(mapping=aes(color=cut),binwidth = .01)+
xlim(0,2.3)
ggplot(diamonds, mapping=aes(carat))+
geom_freqpoly(mapping=aes(color=cut),binwidth = .01)+
xlim(0,2)
#HOW TO CREATE A HEATMAP USing count
diamonds %>%
count(color, cut) %>%
ggplot(mapping=aes(x=color, y=cut))+
geom_tile(mapping=aes(fill=n))
#Use "geom_bin2d()" to VISUALIZE CONTINUOUS DATA
ggplot(diamonds) +
geom_bin2d(mapping=aes(x=carat, y=price))
#Use hexbin to visualize continuous data
ggplot(diamonds) +
geom_hex(mapping=aes(x=carat, y=price))
#Use Boxplot to vizualize continious DATA
ggplot(diamonds, mapping=aes(x=carat, y=price))+
geom_boxplot(mapping=aes(group=cut_width(carat,0.1)))+
xlim(.5, 2.8)
####################
flights
####################
nycflights13::flights
####################
flights <- nycflights13::flights
flighrs%>%
print(n=10)
flights%>%
print(n=10)
flights%>%
print(n=10, width=inf)
flights%>%
print(n=10, width=Inf)
# Extract by name, year from flights tibble
flights$year
flights[[year]]
flights[["year"]]
flights[[3]]
flights[[1]]
flights
#Extract1st, 2nd 3rd column from flights
flights[[1]]
#Extract1st, 2nd 3rd column from flights
flights[[1,2,3]]
#Extract1st, 2nd 3rd column from flights
flights[[1,2,3]]
#Extract1st, 2nd 3rd column from flights
flights[[1]]
flights[[2]]
flights[["year"]]
df%>% .$year
df %>% .$ year
df %>% .$year
flights %>% .$year
is.data.frame(flights)
is.tibble(flights)
is_tibble(flights)
is_tibble(mtcars)
as.tibble(mtcars)
as_tibble(mtcars)
is_tibble(mtcars)
#######
#CH8 Data Import with readr
#######
read_csv(
"a, b, c
1,2,3
4,5,6"
)
#######
#CH8 Data Import with readr
#######
read_csv(
"a, b, c
1,2,3,4
4,5,6"
)
#######
#CH8 Data Import with readr
#######
read_csv(
"a, b, c, d
1,2,3,
4,5,6"
)
#######
#CH8 Data Import with readr
#######
read_csv(
"a, b, c, d
1,2,3,4
4,5,6, 7"
)
#How to skip lines when importing data
read_csv(
"first line of metadata
seond line of metadata
x,y,z
1,2,3"
)
#How to skip lines when importing data
read_csv(
"first line of metadata
seond line of metadata
x,y,z
1,2,3"m skip=2
)
#How to skip lines when importing data
read_csv(
"first line of metadata
seond line of metadata
x,y,z
1,2,3" skip=2
)
#How to skip lines when importing data
read_csv(
"first line of metadata
seond line of metadata
x,y,z
1,2,3" skip=2)
#How to skip lines when importing data
read_csv(
"first line of metadata
seond line of metadata
x,y,z
1,2,3", skip=2)
#How to skip lines when importing data
read_csv(
"first line of metadata
seond line of metadata
x,y,z
1,2,3", skip=1)
#How to skip lines when importing data
read_csv(
"first line of metadata,
seond line of metadata,
x,y,z
1,2,3", skip=1)
#How to skip lines when importing data
read_csv(
"first line of metadata
seond line of metadata
x,y,z
1,2,3", skip=1)
#How to skip lines when importing data
read_csv(
"first line of metadata
seond line of metadata
x,y,z
1,2,3", skip=3)
#How to skip lines when importing data
read_csv(
"first line of metadata
seond line of metadata
x,y,z
1,2,3", skip=2)
#How to skip lines when importing data
read_csv(
"#first line of metadata
seond line of metadata
x,y,z
1,2,3", skip=2)
#How to skip lines when importing data
read_csv(
"#first line of metadata\n
seond line of metadata
x,y,z
1,2,3")
#How to skip lines when importing data
read_csv(
"first line of metadata\n
seond line of metadata
x,y,z
1,2,3")
#How to skip lines when importing data
read_csv(
"first line of metadata
seond line of metadata
x,y,z
1,2,3")
#How to skip lines when importing data
read_csv("first line of metadata
seond line of metadata
x,y,z
1,2,3")
#How to skip lines when importing data
read_csv("first line of metadata
second line of metadata
x,y,z
1,2,3")
#How to skip lines when importing data
read_csv("first line of metadata
second line of metadata
x,y,z
1,2,3")
#######
#CH8 Data Import with readr
#######
read_csv(
"a, b, c, d #1st line is column names
1,2,3,4
4,5,6, 7"
)
#How to skip lines when importing data
read_csv("first line of metadata
second line of metadata
x,y,z
1,2,3")
#How to skip lines when importing data
read_csv("first line of metadata
second line of metadata
x,y,z
1,2,3", skip=2)
#How to skip lines when importing data
read_csv("first line of metadata
second line of metadata
x,y,z
1,2,3", skip=2, colnames=False)
#How to skip lines when importing data
read_csv("first line of metadata
second line of metadata
x,y,z
1,2,3", skip=2, colnames=FALSE)
#How to skip lines when importing data
read_csv("first line of metadata
second line of metadata
x,y,z
1,2,3", skip=2, col_names=FALSE)
read_csv("a,b,cn1,2\n1,2,3,4")
read_csv("a,b,c
1,2\n1,2,3,4")
read_csv("a,b,c\n1,2\n1,2,3,4")
read_csv("a,b,c\n1,2,3\n1,2,3,4")
read_csv("a,b,c\n1,2,3\n 1,2,3,4")
read_csv("a,b,c\n 1,2,3\n 1,2,3,4")
